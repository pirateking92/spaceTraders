import { it, expect, vi, describe } from "vitest";
import { render, screen, waitFor, fireEvent } from "@testing-library/react";
import NewGame from "../components/NewGame";
import userEvent from "@testing-library/user-event";

// original single test that was already her
describe("original test from beginning", () =>
  it("renders", async () => {
    // Arrange
    render(<NewGame />);

    // Act
    await screen.findByRole("heading");

    // Assert
    expect(screen.getByRole("heading")).toHaveTextContent("New Game");
  }));

// generating random 5 character string for username input
const generateRandomUser = () => {
  return Math.random().toString(36).substring(2, 7).toUpperCase();
};

describe("NewGame response", () => {
  it("calls the API with a random username and receives relevant data", async () => {
    // Mock the fetch function to simulate the API response
    global.fetch = vi.fn(() =>
      Promise.resolve({
        ok: true,
        json: () => Promise.resolve({ data: { token: "test-token" } }),
      })
    );

    // Mock localStorage to spy on the setItem method
    const localStorageMock = {
      getItem: vi.fn(),
      setItem: vi.fn(),
      clear: vi.fn(),
    };
    Object.defineProperty(window, "localStorage", { value: localStorageMock });
    // Generate a random user and render the component
    const randomUser = generateRandomUser();

    // Find the input fields
    const symbolInput = screen.getByLabelText(/symbol/i);
    const submitButton = screen.getByRole("button", { name: /submit/i });

    // Simulate user input by typing the random user into the symbol input
    fireEvent.change(symbolInput, { target: { value: randomUser } });

    // Simulate clicking the submit button
    fireEvent.click(submitButton);

    // Wait for the fetch request to resolve and verify the expected outcome
    await waitFor(() => {
      // Check that fetch was called with the correct API endpoint and body
      expect(global.fetch).toHaveBeenCalledWith(
        "https://api.spacetraders.io/v2/register",
        expect.objectContaining({
          method: "POST",
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify({
            symbol: randomUser,
            faction: "COSMIC",
          }),
        })
      );

      // adding part that checks if the token is saved in localStorage
      expect(localStorage.setItem).toHaveBeenCalledWith("token", "test-token");

      // Check that the token is displayed in the component
      expect(screen.getByText(/API token: test-token/i)).toBeInTheDocument();
    });
  });
});

describe("Token Save", () => {
  it("saves the token generated by a new user", async () => {
    render(<NewGame />);
  });
});
